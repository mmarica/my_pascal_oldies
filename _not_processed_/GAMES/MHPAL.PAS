{$A+,B-,D+,E+,F+,G+,I+,L+,N-,O+,P+,Q+,R+,S+,T-,V+,X+,Y+}
unit mhpal;
interface

type mvpal=array[0..255] of array[1..3] of byte;
     convertpal2norm=array[0..255] of byte;
const normpal: mvpal=((0,0,0),(0,0,42),(0,42,0),(0,42,42),(42,0,0),(42,0,42),
(42,21,0),(42,42,42),(21,21,21),(21,21,63),(21,63,21),(21,63,63),(63,21,21),
(63,21,63),(63,63,21),(63,63,63),(0,0,0),(5,5,5),(8,8,8),(11,11,11),
(14,14,14),(17,17,17),(20,20,20),(24,24,24),(28,28,28),(32,32,32),(36,36,36),
(40,40,40),(45,45,45),(50,50,50),(56,56,56),(63,63,63),(0,0,63),(16,0,63),
(31,0,63),(47,0,63),(63,0,63),(63,0,47),(63,0,31),(63,0,16),(63,0,0),
(63,16,0),(63,31,0),(63,47,0),(63,63,0),(47,63,0),(31,63,0),(16,63,0),
(0,63,0),(0,63,16),(0,63,31),(0,63,47),(0,63,63),(0,47,63),(0,31,63),
(0,16,63),(31,31,63),(39,31,63),(47,31,63),(55,31,63),(63,31,63),(63,31,55),
(63,31,47),(63,31,39),(63,31,31),(63,39,31),(63,47,31),(63,55,31),(63,63,31),
(55,63,31),(47,63,31),(39,63,31),(31,63,31),(31,63,39),(31,63,47),(31,63,55),
(31,63,63),(31,55,63),(31,47,63),(31,39,63),(45,45,63),(49,45,63),(54,45,63),
(58,45,63),(63,45,63),(63,45,58),(63,45,54),(63,45,49),(63,45,45),(63,49,45),
(63,54,45),(63,58,45),(63,63,45),(58,63,45),(54,63,45),(49,63,45),(45,63,45),
(45,63,49),(45,63,54),(45,63,58),(45,63,63),(45,58,63),(45,54,63),(45,49,63),
(0,0,28),(7,0,28),(14,0,28),(21,0,28),(28,0,28),(28,0,21),(28,0,14),
(28,0,7),(28,0,0),(28,7,0),(28,14,0),(28,21,0),(28,28,0),(21,28,0),
(14,28,0),(7,28,0),(0,28,0),(0,28,7),(0,28,14),(0,28,21),(0,28,28),
(0,21,28),(0,14,28),(0,7,28),(14,14,28),(17,14,28),(21,14,28),(24,14,28),
(28,14,28),(28,14,24),(28,14,21),(28,14,17),(28,14,14),(28,17,14),(28,21,14),
(28,24,14),(28,28,14),(24,28,14),(21,28,14),(17,28,14),(14,28,14),(14,28,17),
(14,28,21),(14,28,24),(14,28,28),(14,24,28),(14,21,28),(14,17,28),(20,20,28),
(22,20,28),(24,20,28),(26,20,28),(28,20,28),(28,20,26),(28,20,24),(28,20,22),
(28,20,20),(28,22,20),(28,24,20),(28,26,20),(28,28,20),(26,28,20),(24,28,20),
(22,28,20),(20,28,20),(20,28,22),(20,28,24),(20,28,26),(20,28,28),(20,26,28),
(20,24,28),(20,22,28),(0,0,16),(4,0,16),(8,0,16),(12,0,16),(16,0,16),
(16,0,12),(16,0,8),(16,0,4),(16,0,0),(16,4,0),(16,8,0),(16,12,0),
(16,16,0),(12,16,0),(8,16,0),(4,16,0),(0,16,0),(0,16,4),(0,16,8),
(0,16,12),(0,16,16),(0,12,16),(0,8,16),(0,4,16),(8,8,16),(10,8,16),
(12,8,16),(14,8,16),(16,8,16),(16,8,14),(16,8,12),(16,8,10),(16,8,8),
(16,10,8),(16,12,8),(16,14,8),(16,16,8),(14,16,8),(12,16,8),(10,16,8),
(8,16,8),(8,16,10),(8,16,12),(8,16,14),(8,16,16),(8,14,16),(8,12,16),
(8,10,16),(11,11,16),(12,11,16),(13,11,16),(15,11,16),(16,11,16),(16,11,15),
(16,11,13),(16,11,12),(16,11,11),(16,12,11),(16,13,11),(16,15,11),(16,16,11),
(15,16,11),(13,16,11),(12,16,11),(11,16,11),(11,16,12),(11,16,13),(11,16,15),
(11,16,16),(11,15,16),(11,13,16),(11,12,16),(0,0,0),(0,0,0),(0,0,0),
(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0));
var normpal1: mvpal;

procedure getcolorpal(col: byte; var r,g,b: byte);
procedure setcolorpal(col,r,g,b: byte);
procedure getpal(var cpal: mvpal);
procedure setpal(cpal: mvpal);
function palnearpalcolor(cpal: mvpal;r,g,b: byte): byte;
procedure convertpal2pal(pal1,pal2: mvpal;var cvpal: convertpal2norm);

implementation

procedure getcolorpal(col: byte; var r,g,b: byte);
var color,auxr,auxg,auxb: byte;
begin
  port[$3c7]:=col;
  r:=port[$3c9];
  g:=port[$3c9];
  b:=port[$3c9];
end;

procedure setcolorpal(col,r,g,b: byte);
begin
 port[$3c8]:=col;
 port[$3c9]:=r;
 port[$3c9]:=g;
 port[$3c9]:=b;
end;

procedure getpal(var cpal: mvpal);
var x,r,g,b: byte;
begin
 for x:=0 to 255 do
 begin
  getcolorpal(x,r,g,b);
  cpal[x][1]:=r;
  cpal[x][2]:=g;
  cpal[x][3]:=b;
 end;
end;

procedure setpal(cpal: mvpal);
var x: byte;
begin
 for x:=0 to 255 do
 setcolorpal(x,cpal[x][1],cpal[x][2],cpal[x][3]);
end;

function palnearpalcolor(cpal: mvpal;r,g,b: byte): byte;
var x,y,posnr: longint;
    ccol,min: longint;
    cr,cg,cb: longint;
    dif: array[0..255] of longint;
    tmp: array[1..3] of longint;
begin
 ccol:=0;
 for x:=0 to 255 do
 begin
  if (r=cpal[x][1])and(g=cpal[x][2])and(b=cpal[x][3]) then
  begin
   palnearpalcolor:=x;
   exit;
  end;
  tmp[1]:=cpal[x][1]-r;
  tmp[2]:=cpal[x][2]-g;
  tmp[3]:=cpal[x][3]-b;
  for y:=1 to 3 do
  if tmp[y]<0 then tmp[y]:=-tmp[y];
  dif[x]:=tmp[1]+tmp[2]+tmp[3];
 end;
 min:=dif[ccol];
 for x:=0 to 255 do
 if min>dif[x] then
 begin
  min:=dif[x];
  ccol:=x;
 end;
 palnearpalcolor:=ccol;
end;

procedure convertpal2pal(pal1,pal2: mvpal;var cvpal: convertpal2norm);
var x: byte;
begin
 for x:=0 to 255 do
 begin
  if(pal2[x][1]=pal1[x][1])and(pal2[x][2]=pal1[x][2])and(pal2[x][3]=pal1[x][3]) then
  begin
   cvpal[x]:=x;
   continue;
  end;
  cvpal[x]:=palnearpalcolor(pal2,pal1[x][1],pal1[x][2],pal1[x][3]);
 end;
end;

procedure initpal;
const paldiv: array[1..8] of array[1..3] of byte=((63,63,63),(0,0,63),(0,63,0),
      (0,63,63),(63,0,0),(63,0,63),(63,31,0),(63,63,21));
var x,y,z: integer;
begin
 for x:=1 to 8 do
 for y:=1 to 3 do
 for z:=1 to 32 do
 normpal1[(x-1)*32+z-1][y]:=round((paldiv[x][y]/32)*z);
end;

begin
 initpal;
end.